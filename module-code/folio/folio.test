<?php

/**
 * @file
 * Tests for folio.module.
 */

class folioTestCase extends DrupalWebTestCase {
  protected $folio;
  // $folio_author is a user with permission to create and edit folios.
  protected $folio_author;
  // $web_user is a user with permission to view a folio
  // and access the printer-friendly version.
  protected $web_user;
  // $admin_user is a user with permission to create and edit folios and to administer blocks.
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'folio functionality',
      'description' => 'Create a folio, add pages, and test folio interface.',
      'group' => 'folio',
    );
  }

  function setUp() {
    parent::setUp(array('folio', 'node_access_test'));

    // node_access_test requires a node_access_rebuild().
    node_access_rebuild();

    // Create users.
    $this->folio_author = $this->drupalCreateUser(array('create new folios', 'create folio content', 'edit own folio content', 'add content to folios'));
    $this->web_user = $this->drupalCreateUser(array('access printer-friendly version', 'node test view'));
    $this->admin_user = $this->drupalCreateUser(array('create new folios', 'create folio content', 'edit own folio content', 'add content to folios', 'administer blocks', 'administer permissions'));
  }

  /**
   * Create a new folio with a page hierarchy.
   */
  function createfolio() {
    // Create new folio.
    $this->drupalLogin($this->folio_author);

    $this->folio = $this->createfolioNode('new');
    $folio = $this->folio;

    /*
     * Add page hierarchy to folio.
     * folio
     *  |- Node 0
     *   |- Node 1
     *   |- Node 2
     *  |- Node 3
     *  |- Node 4
     */
    $nodes = array();
    $nodes[] = $this->createfolioNode($folio->nid); // Node 0.
    $nodes[] = $this->createfolioNode($folio->nid, $nodes[0]->folio['mlid']); // Node 1.
    $nodes[] = $this->createfolioNode($folio->nid, $nodes[0]->folio['mlid']); // Node 2.
    $nodes[] = $this->createfolioNode($folio->nid); // Node 3.
    $nodes[] = $this->createfolioNode($folio->nid); // Node 4.

    $this->drupalLogout();

    return $nodes;
  }

  /**
   * Test folio functionality through node interfaces.
   */
  function testfolio() {
    // Create new folio.
    $nodes = $this->createfolio();
    $folio = $this->folio;

    $this->drupalLogin($this->web_user);

    // Check that folio pages display along with the correct outlines and
    // previous/next links.
    $this->checkfolioNode($folio, array($nodes[0], $nodes[3], $nodes[4]), FALSE, FALSE, $nodes[0], array());
    $this->checkfolioNode($nodes[0], array($nodes[1], $nodes[2]), $folio, $folio, $nodes[1], array($folio));
    $this->checkfolioNode($nodes[1], NULL, $nodes[0], $nodes[0], $nodes[2], array($folio, $nodes[0]));
    $this->checkfolioNode($nodes[2], NULL, $nodes[1], $nodes[0], $nodes[3], array($folio, $nodes[0]));
    $this->checkfolioNode($nodes[3], NULL, $nodes[2], $folio, $nodes[4], array($folio));
    $this->checkfolioNode($nodes[4], NULL, $nodes[3], $folio, FALSE, array($folio));

    $this->drupalLogout();

    // Create a second folio, and move an existing folio page into it.
    $this->drupalLogin($this->folio_author);
    $other_folio = $this->createfolioNode('new');
    $node = $this->createfolioNode($folio->nid);
    $edit = array('folio[bid]' => $other_folio->nid);
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));

    $this->drupalLogout();
    $this->drupalLogin($this->web_user);

    // Check that the nodes in the second folio are displayed correctly.
    // First we must set $this->folio to the second folio, so that the
    // correct regex will be generated for testing the outline.
    $this->folio = $other_folio;
    $this->checkfolioNode($other_folio, array($node), FALSE, FALSE, $node, array());
    $this->checkfolioNode($node, NULL, $other_folio, $other_folio, FALSE, array($other_folio));
  }

  /**
   * Check the outline of sub-pages; previous, up, and next; and printer friendly version.
   *
   * @param $node
   *   Node to check.
   * @param $nodes
   *   Nodes that should be in outline.
   * @param $previous
   *   Previous link node.
   * @param $up
   *   Up link node.
   * @param $next
   *   Next link node.
   * @param $breadcrumb
   *   The nodes that should be displayed in the breadcrumb.
   */
  function checkfolioNode($node, $nodes, $previous = FALSE, $up = FALSE, $next = FALSE, array $breadcrumb) {
    // $number does not use drupal_static as it should not be reset
    // since it uniquely identifies each call to checkfolioNode().
    static $number = 0;
    $this->drupalGet('node/' . $node->nid);

    // Check outline structure.
    if ($nodes !== NULL) {
      $this->assertPattern($this->generateOutlinePattern($nodes), t('Node ' . $number . ' outline confirmed.'));
    }
    else {
      $this->pass(t('Node ' . $number . ' doesn\'t have outline.'));
    }

    // Check previous, up, and next links.
    if ($previous) {
      $this->assertRaw(l('‹ ' . $previous->title, 'node/' . $previous->nid, array('attributes' => array('class' => array('page-previous'), 'title' => t('Go to previous page')))), t('Previous page link found.'));
    }

    if ($up) {
      $this->assertRaw(l('up', 'node/' . $up->nid, array('attributes' => array('class' => array('page-up'), 'title' => t('Go to parent page')))), t('Up page link found.'));
    }

    if ($next) {
      $this->assertRaw(l($next->title . ' ›', 'node/' . $next->nid, array('attributes' => array('class' => array('page-next'), 'title' => t('Go to next page')))), t('Next page link found.'));
    }

    // Compute the expected breadcrumb.
    $expected_breadcrumb = array();
    $expected_breadcrumb[] = url('');
    foreach ($breadcrumb as $a_node) {
      $expected_breadcrumb[] = url('node/' . $a_node->nid);
    }

    // Fetch links in the current breadcrumb.
    $links = $this->xpath('//div[@class="breadcrumb"]/a');
    $got_breadcrumb = array();
    foreach ($links as $link) {
      $got_breadcrumb[] = (string) $link['href'];
    }

    // Compare expected and got breadcrumbs.
    $this->assertIdentical($expected_breadcrumb, $got_breadcrumb, t('The breadcrumb is correctly displayed on the page.'));

    // Check printer friendly version.
    $this->drupalGet('folio/export/html/' . $node->nid);
    $this->assertText($node->title, t('Printer friendly title found.'));
    $this->assertRaw(check_markup($node->body[LANGUAGE_NONE][0]['value'], $node->body[LANGUAGE_NONE][0]['format']), t('Printer friendly body found.'));

    $number++;
  }

  /**
   * Create a regular expression to check for the sub-nodes in the outline.
   *
   * @param array $nodes Nodes to check in outline.
   */
  function generateOutlinePattern($nodes) {
    $outline = '';
    foreach ($nodes as $node) {
      $outline .= '(node\/' . $node->nid . ')(.*?)(' . $node->title . ')(.*?)';
    }

    return '/<div id="folio-navigation-' . $this->folio->nid . '"(.*?)<ul(.*?)' . $outline . '<\/ul>/s';
  }

  /**
   * Create folio node.
   *
   * @param integer $folio_nid folio node id or set to 'new' to create new folio.
   * @param integer $parent Parent folio reference id.
   */
  function createfolioNode($folio_nid, $parent = NULL) {
    // $number does not use drupal_static as it should not be reset
    // since it uniquely identifies each call to createfolioNode().
    static $number = 0; // Used to ensure that when sorted nodes stay in same order.

    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $number . ' - SimpleTest test node ' . $this->randomName(10);
    $edit["body[$langcode][0][value]"] = 'SimpleTest test body ' . $this->randomName(32) . ' ' . $this->randomName(32);
    $edit['folio[bid]'] = $folio_nid;

    if ($parent !== NULL) {
      $this->drupalPost('node/add/folio', $edit, t('Change folio (update list of parents)'));

      $edit['folio[plid]'] = $parent;
      $this->drupalPost(NULL, $edit, t('Save'));
    }
    else {
      $this->drupalPost('node/add/folio', $edit, t('Save'));
    }

    // Check to make sure the folio node was created.
    $node = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertNotNull(($node === FALSE ? NULL : $node), t('folio node found in database.'));
    $number++;

    return $node;
  }

  /**
   * Tests folio export ("printer-friendly version") functionality.
   */
  function testfolioExport() {
    // Create a folio.
    $nodes = $this->createfolio();

    // Login as web user and view printer-friendly version.
    $this->drupalLogin($this->web_user);
    $this->drupalGet('node/' . $this->folio->nid);
    $this->clickLink(t('Printer-friendly version'));

    // Make sure each part of the folio is there.
    foreach ($nodes as $node) {
      $this->assertText($node->title, t('Node title found in printer friendly version.'));
      $this->assertRaw(check_markup($node->body[LANGUAGE_NONE][0]['value'], $node->body[LANGUAGE_NONE][0]['format']), t('Node body found in printer friendly version.'));
    }

    // Make sure we can't export an unsupported format.
    $this->drupalGet('folio/export/foobar/' . $this->folio->nid);
    $this->assertResponse('404', t('Unsupported export format returned "not found".'));

    // Make sure we get a 404 on a not existing folio node.
    $this->drupalGet('folio/export/html/123');
    $this->assertResponse('404', t('Not existing folio node returned "not found".'));

    // Make sure an anonymous user cannot view printer-friendly version.
    $this->drupalLogout();

    // Load the folio and verify there is no printer-friendly version link.
    $this->drupalGet('node/' . $this->folio->nid);
    $this->assertNoLink(t('Printer-friendly version'), t('Anonymous user is not shown link to printer-friendly version.'));

    // Try getting the URL directly, and verify it fails.
    $this->drupalGet('folio/export/html/' . $this->folio->nid);
    $this->assertResponse('403', t('Anonymous user properly forbidden.'));
  }

  /**
   * Tests the functionality of the folio navigation block.
   */
  function testfolioNavigationBlock() {
    $this->drupalLogin($this->admin_user);

    // Set block title to confirm that the interface is available.
    $block_title = $this->randomName(16);
    $this->drupalPost('admin/structure/block/manage/folio/navigation/configure', array('title' => $block_title), t('Save block'));
    $this->assertText(t('The block configuration has been saved.'), t('Block configuration set.'));

    // Set the block to a region to confirm block is available.
    $edit = array();
    $edit['blocks[folio_navigation][region]'] = 'footer';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertText(t('The block settings have been updated.'), t('Block successfully move to footer region.'));

     // Give anonymous users the permission 'node test view'.
     $edit = array();
     $edit['1[node test view]'] = TRUE;
     $this->drupalPost('admin/people/permissions/1', $edit, t('Save permissions'));
     $this->assertText(t('The changes have been saved.'), t("Permission 'node test view' successfully assigned to anonymous users."));

    // Test correct display of the block.
    $nodes = $this->createfolio();
    $this->drupalGet('<front>');
    $this->assertText($block_title, t('folio navigation block is displayed.'));
    $this->assertText($this->folio->title, t('Link to folio root (@title) is displayed.', array('@title' => $nodes[0]->title)));
    $this->assertNoText($nodes[0]->title, t('No links to individual folio pages are displayed.'));
  }

  /**
   * Test the folio navigation block when an access module is enabled.
   */
   function testNavigationBlockOnAccessModuleEnabled() {
     $this->drupalLogin($this->admin_user);
     $edit = array();

     // Set the block title.
     $block_title = $this->randomName(16);
     $edit['title'] = $block_title;

     // Set block display to 'Show block only on folio pages'.
     $edit['folio_block_mode'] = 'folio pages';
     $this->drupalPost('admin/structure/block/manage/folio/navigation/configure', $edit, t('Save block'));
     $this->assertText(t('The block configuration has been saved.'), t('Block configuration set.'));

     // Set the block to a region to confirm block is available.
     $edit = array();
     $edit['blocks[folio_navigation][region]'] = 'footer';
     $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
     $this->assertText(t('The block settings have been updated.'), t('Block successfully move to footer region.'));

     // Give anonymous users the permission 'node test view'.
     $edit = array();
     $edit['1[node test view]'] = TRUE;
     $this->drupalPost('admin/people/permissions/1', $edit, t('Save permissions'));
     $this->assertText(t('The changes have been saved.'), t('Permission \'node test view\' successfully assigned to anonymous users.'));

     // Create a folio.
     $this->createfolio();

     // Test correct display of the block to registered users.
     $this->drupalLogin($this->web_user);
     $this->drupalGet('node/' . $this->folio->nid);
     $this->assertText($block_title, t('folio navigation block is displayed to registered users.'));
     $this->drupalLogout();

     // Test correct display of the block to anonymous users.
     $this->drupalGet('node/' . $this->folio->nid);
     $this->assertText($block_title, t('folio navigation block is displayed to anonymous users.'));
   }
}
